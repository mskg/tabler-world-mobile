service: tabler-world-data-service

plugins:
  - serverless-plugin-aws-alerts
  - serverless-offline
  - serverless-webpack

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}

  webpack:
    keepOutputDirectory: true
    packager: 'yarn'
    includeModules:
      forceExclude:
        - aws-sdk

  email: ${env:ALERT_EMAIL}

  # warmer for database access
  warm_enabled:
    dev: false
    test: false
    prod: true

  bundle:
    dev: false
    test: true
    prod: true

  # SNS topics to check env
  alerts:
    stages:
      - test
      - prod

    topics:
      alarm:
        topic: ${self:service}-${self:custom.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: ${self:custom.email}

    alarms:
      - functionErrors
      - processTimeouts

    definitions:
      processTimeouts:
        metric: processTimeouts
        threshold: 0
        statistic: Minimum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanThreshold
        pattern: 'Process exited before completing'

# we want seperate files to minimize depenencies in files
package:
  individually: ${self:custom.bundle.${self:custom.stage}}

provider:
  name: aws
  stage: dev
  region: eu-west-1

  runtime: nodejs10.x

  deploymentBucket:
    name: tabler-world-deployments
    maxPreviousDeploymentArtifacts: 5
    blockPublicAccess: true
    serverSideEncryption: AES256

  memorySize: 128
  versionFunctions: false

  tracing:
    apiGateway: true

  # allow to redefine variables for debug purposes
  environment:
    ${file(serverless.env.yml):${self:custom.stage}}

  vpc:
    ${file(../devops/vpc.yml):lambda}

  # global role definition
  iamRoleStatements:
    # allow database access
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:lambda:"
            - ${self:provider.region}
            - ":"
            - Ref: "AWS::AccountId"
            - ":function:"
            - "tabler-world-data-service-"
            - ${self:custom.stage}
            - "-api"

    # read parameters from SSM
    - Effect: Allow
      Action:
        - ssm:GetParameters
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - ${self:provider.region}
            - ":"
            - Ref: "AWS::AccountId"
            - ":parameter*/"
            - ${self:custom.stage}
            - "/*"

    # tracing AWSXrayWriteOnlyAccess
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
        - xray:GetSamplingRules
        - xray:GetSamplingTargets
        - xray:GetSamplingStatisticSummaries

      Resource:
        - "*"

functions:
  #
  # data-service
  #
  api:
    handler: src/lambda.handler
    timeout: 60
    tracing: Active

    environment:
      db_role: tw_read_${self:custom.stage}

    events:
      - schedule:
          name: warm-tabler-world-tabler-data-service-api-${self:custom.stage}
          rate: rate(15 minutes)
          enabled: ${self:custom.warm_enabled.${self:custom.stage}}
          input:
            warmer: true
            concurrency: 1

resources:
  Resources:
    ApiLogGroup:
      Properties:
        RetentionInDays: "14"

  Outputs:
    DataArn:
      Value:
        Fn::GetAtt:
          # functions are renamed acording to https://github.com/serverless/serverless/blob/master/docs/providers/aws/guide/resources.md
          - ApiLambdaFunction
          - Arn
      Export:
        Name: DataArn-${self:custom.stage}

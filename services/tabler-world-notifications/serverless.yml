service: tabler-world-notifications

plugins:
  - serverless-plugin-aws-alerts
  - serverless-offline
  - serverless-webpack

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}

  webpack:
    keepOutputDirectory: true
    packager: 'yarn'
    includeModules:
      forceExclude:
        - aws-sdk

  email: ${env:ALERT_EMAIL}
  sqs_push: ${self:service}-push-${self:custom.stage}

  bundle:
    dev: false
    test: true
    prod: true

  cron_enabled:
    dev: false
    test: true
    prod: true

  # SNS topics to check env
  alerts:
    stages:
      - test
      - prod

    topics:
      alarm:
        topic: ${self:service}-${self:custom.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: ${self:custom.email}

    alarms:
      - functionErrors
      - processTimeouts

    definitions:
      processTimeouts:
        metric: processTimeouts
        threshold: 0
        statistic: Minimum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanThreshold
        pattern: 'Process exited before completing'


# we want seperate files to minimize depenencies in files
package:
  individually: ${self:custom.bundle.${self:custom.stage}}

provider:
  name: aws
  stage: dev
  region: eu-west-1

  runtime: nodejs10.x

  deploymentBucket:
    name: tabler-world-deployments
    maxPreviousDeploymentArtifacts: 5
    blockPublicAccess: true
    serverSideEncryption: AES256

  memorySize: 128
  versionFunctions: false

  tracing:
    apiGateway: true

  # allow to redefine variables for debug purposes
  environment:
    ${file(serverless.env.yml):${self:custom.stage}}

  vpc:
    ${file(../devops/vpc.yml):lambda}

  # global role definition
  iamRoleStatements:
    # read parameters from SSM
    - Effect: Allow
      Action:
        - ssm:GetParameters
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - ${self:provider.region}
            - ":"
            - Ref: "AWS::AccountId"
            - ":parameter*/"
            - ${self:custom.stage}
            - "/*"

    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:SendMessageBatch
      Resource:
        Fn::GetAtt:
          - FifoPushQueue
          - Arn

    # tracing AWSXrayWriteOnlyAccess
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
        - xray:GetSamplingRules
        - xray:GetSamplingTargets
        - xray:GetSamplingStatisticSummaries

      Resource:
        - "*"

functions:
  #
  # Query birthdays
  #
  birthdays:
    handler: src/birthdays.handler
    timeout: 600
    tracing: Active

    environment:
      XRAY_DISABLED: false

    events:
      - schedule:
          name: ${self:service}-birthdays-${self:custom.stage}
          description: Sends push notifications from TABLER.WORLD

          ## 07 UTC => 9 GMT+2
          rate: cron(0 07 * * ? *)
          enabled: ${self:custom.cron_enabled.${self:custom.stage}}

  #
  # Send push notificationos
  #
  push:
    handler: src/push.handler
    timeout: 60
    memorySize: 128
    reservedConcurrency: 1
    tracing: Active

    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - FifoPushQueue
              - Arn
  #
  # Check push notifications
  #
  check:
    handler: src/check.handler
    timeout: 600
    tracing: Active

    environment:
      XRAY_DISABLED: false

    events:
      # - http:
      #     path: check-notifications
      #     method: get
      #     cors: true
      - schedule:
          name: ${self:service}-check-${self:custom.stage}
          description: Checks delivery status of push notifications

          rate: rate(6 hours)
          enabled: ${self:custom.cron_enabled.${self:custom.stage}}

resources:
  Resources:
    BirthdaysLogGroup:
      Properties:
        RetentionInDays: "7"

    PushLogGroup:
      Properties:
        RetentionInDays: "7"

    CheckLogGroup:
      Properties:
        RetentionInDays: "7"

    FifoPushQueue:
      Type: AWS::SQS::Queue
      UpdateReplacePolicy: Delete
      Properties:
        QueueName: ${self:custom.sqs_push}.fifo
        MessageRetentionPeriod: 1209600
        ContentBasedDeduplication: true
        FifoQueue: true
        # 6 times lambda timeout
        VisibilityTimeout: 4320
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - PushQueueDeadLetters
              - Arn
          maxReceiveCount: 5

    PushQueueDeadLetters:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs_push}-dead.fifo
        FifoQueue: true
        ContentBasedDeduplication: true
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 0

  Outputs:
    FifoPushQueueArn:
      Value:
        Fn::GetAtt:
          - FifoPushQueue
          - Arn
      Export:
        Name: FifoPushQueueArn-${self:custom.stage}

    FifoPushQueueUrl:
      Value:
        Ref: FifoPushQueue
      Export:
        Name: FifoPushQueueUrl-${self:custom.stage}

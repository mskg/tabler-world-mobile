service: tabler-world-api

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-aws-alerts
  - serverless-domain-manager
  - serverless-offline
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-plugin-metric

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  apiError: ${self:service}-websocket-error-${self:custom.stage}

  webpack:
    keepOutputDirectory: true
    packager: 'yarn'
    includeModules:
      forceExclude:
        - aws-sdk

  cache_table:
    Fn::ImportValue: CacheTableName-${self:custom.stage}
  cache_version: '1.3#v3'

  email: ${env:ALERT_EMAIL}

  domainname: ${self:custom.stage}-api.app.roundtable.world
  wsdomainname: ${self:custom.stage}-ws-api.app.roundtable.world

  demo_api_key: ${env:DEMO_API_KEY}

  push_queue_arn:
    'arn:aws:sqs:eu-west-1:181860213310:tabler-world-temp-migration.fifo'
    # Fn::ImportValue: FifoPushQueueArn-${self:custom.stage}
  push_queue_url:
    'https://sqs.eu-west-1.amazonaws.com/181860213310/tabler-world-temp-migration.fifo'
    # Fn::ImportValue: FifoPushQueueArn-${self:custom.stage}

  bucket: tabler-world-chat-attachments-${self:custom.stage}
  connections_table: tabler-world-ws-connections-${self:custom.stage}
  subscriptions_table: tabler-world-ws-subscriptions-${self:custom.stage}
  events_table: tabler-world-ws-events-${self:custom.stage}
  conversations_table: tabler-world-chat-conversations-${self:custom.stage}
  pushsubscriptions_table: tabler-world-push-subscriptions-${self:custom.stage}

  # api throtteling
  throttle:
    dev:
      burstLimit: 10
      rateLimit: 5

    test:
      burstLimit: 40
      rateLimit: 20

    prod:
      burstLimit: 200
      rateLimit: 100

  backup_eventstable:
    dev: false
    test: false
    prod: true

  bundle:
    dev: false
    test: true
    prod: true

  # SNS topics to check env
  alerts:
    stages:
      - test
      - prod

    topics:
      alarm:
        topic: ${self:service}-${self:custom.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: ${self:custom.email}

    alarms:
      - functionErrors
      - processTimeouts
      - graphqlErrors

    definitions:
      processTimeouts:
        metric: processTimeouts
        threshold: 0
        statistic: Minimum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanThreshold
        pattern: 'Process exited before completing'

  # domain
  customDomain:
    domainName: ${self:custom.domainname}
    certificateName: '*.app.roundtable.world'
    createRoute53Record: true
    endpointType: 'regional'
    websockets:
      domainName: ${self:custom.wsdomainname}
      certificateName: '*.app.roundtable.world'
      createRoute53Record: true
      endpointType: 'regional'
      stage: '${self:custom.stage}'

  # chat
  dynamodb:
    noStart: false
    stages:
      - dev
    start:
      port: 8004
      inMemory: true
      migrate: true
      convertEmptyValues: true

  s3:
    # Uncomment the following line only if you want to specify host address of S3 service.
    # adress: 0.0.0.0
    # Uncomment the following line only if you want to specify S3 server address.
    # Ordinary, this value is localhost. But you can modify this value to use other S3 server.
    # host: 0.0.0.0
    port: 8005
    directory: /tmp  # this directory must be already created.
    # Uncomment the first line only if you want to use cors with specified policy
    # Uncomment the second line only if you don't want to use cors
    # Not uncomment the these lines only if your wanto use cors with default policy
    # cors: relative/path/to/your/cors.xml
    # website: relative/path/to/your/website.xml
    # Uncomment only if you already have a S3 server running locally
    # noStart: true

  metrics:
    - name: throttle-location
      namespace: ${self:service}-${self:custom.stage}
      pattern: '[category=METRIC, name="throttle-location", value, unit]'
      value: "$value"
      functions:
        - graphql
        - websocket
        - publish

    - name: throttle-global
      namespace: ${self:service}-${self:custom.stage}
      pattern: '[category=METRIC, name="throttle-global", value, unit]'
      value: "$value"
      functions:
        - graphql
        - websocket
        - publish

    - name: graphql-error
      namespace: ${self:service}-${self:custom.stage}
      pattern: '[category=METRIC, name="graphql-error", value, unit]'
      value: "$value"
      functions:
        - graphql
        - websocket
        - publish

    - name: query-location
      namespace: ${self:service}-${self:custom.stage}
      pattern: '[category=METRIC, name="query-location", value, unit]'
      value: "$value"
      functions:
        - graphql
        - websocket
        - publish

    - name: sql-latency
      namespace: ${self:service}-${self:custom.stage}
      pattern: '[category=METRIC, name="sql-latency", value, unit]'
      value: "$value"
      functions:
        - graphql
        - websocket
        - publish

# we want seperate files to minimize depenencies in files
package:
  individually: ${self:custom.bundle.${self:custom.stage}}

provider:
  name: aws
  stage: dev
  region: eu-west-1

  deploymentBucket:
    name: tabler-world-deployments
    maxPreviousDeploymentArtifacts: 5
    blockPublicAccess: true
    serverSideEncryption: AES256

  runtime: nodejs10.x

  memorySize: 128
  versionFunctions: false

  tracing:
    apiGateway: true

  # allow to redefine variables for debug purposes
  environment:
    ${file(serverless.env.yml):${self:custom.stage}}

  apiKeys:
    - app:
      - name: tabler-world-api-lambda-authorizer-${self:custom.stage}
        # this is hardcoded also in code, move?
        value: tabler-world-api-lambda-authorizer-${self:custom.stage}

    - demo:
      - name: tabler-world-demo-${self:custom.stage}
        value: ${self:custom.demo_api_key}

  apiGateway:
    minimumCompressionSize: 1024
    apiKeySourceType: AUTHORIZER
#    websocketsApiKeySelectionExpression: "$context.authorizer.usageIdentifierKey"

  # Limited by API Keys
  usagePlan:
    - app:
        throttle:
          burstLimit: ${self:custom.throttle.${self:custom.stage}.burstLimit}
          rateLimit: ${self:custom.throttle.${self:custom.stage}.rateLimit}

    - demo:
        throttle:
          burstLimit: ${self:custom.throttle.${self:custom.stage}.burstLimit}
          rateLimit: ${self:custom.throttle.${self:custom.stage}.rateLimit}

  # global role definition
  iamRoleStatements:
    # allow database access
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource:
        Fn::ImportValue: DataArn-${self:custom.stage}

    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource:
        Fn::ImportValue: ValidateTokenArn-${self:custom.stage}

    # read parameters from SSM
    - Effect: Allow
      Action:
        - ssm:GetParameters
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - ${self:provider.region}
            - ":"
            - Ref: "AWS::AccountId"
            - ":parameter*/"
            - ${self:custom.stage}
            - "/*"

    # tracing AWSXrayWriteOnlyAccess
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
        - xray:GetSamplingRules
        - xray:GetSamplingTargets
        - xray:GetSamplingStatisticSummaries

      Resource:
        - "*"

functions:
  #
  # Update database
  #
  database-update:
    handler: src/sql/lambda.handler
    timeout: 600

    vpc:
      ${file(../devops/vpc.yml):lambda}

    environment:
      db_role: tw_read_${self:custom.stage}
      XRAY_DISABLED: true

  #
  # graphql Demo
  #
  graphql-demo:
    handler: src/graphql/graphqlLambdaMock.handler
    timeout: 15
    memorySize: 128
    tracing: Active

    events:
        - http:
            path: graphql-demo
            method: post
            authorizer:
              type: CUSTOM
              authorizerId:
                Ref: CustomApiGatewayAuthorizer
            cors: true
            private: true

  #
  # graphql
  #
  graphql:
    handler: src/graphql/graphqlLambda.handler
    timeout: 30
    memorySize: 256
    tracing: Active

    environment:
      ${file(serverless.env.yml):api}

    vpc:
      ${file(../devops/vpc.yml):lambda}

    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem

        # Restrict our IAM role permissions to
        # the specific table for the stage
        Resource:
          - Fn::ImportValue: CacheTableArn-${self:custom.stage}
          - !GetAtt [ connectionsTable, Arn ]
          - !Join
            - ''
            - - !GetAtt [ connectionsTable, Arn ]
              - '/index/*'
          - !GetAtt [ subscriptionsTable, Arn ]
          - !Join
            - ''
            - - !GetAtt [ subscriptionsTable, Arn ]
              - '/index/*'
          - !Join
            - ''
            - - !GetAtt [ subscriptionsTable, Arn ]
              - '/index/connection'
          - !GetAtt [ conversationsTable, Arn ]
          - !Join
            - ''
            - - !GetAtt [ conversationsTable, Arn ]
              - '/index/*'
          - !GetAtt [ eventsTable, Arn ]
          - !GetAtt [ pushSubscriptionsTable, Arn ]
          - !Join
            - ''
            - - !GetAtt [ pushSubscriptionsTable, Arn ]
              - '/index/*'

      - Effect: Allow
        Action:
          - 'execute-api:Invoke'
          - 'execute-api:ManageConnections'
        Resource: !Join
          - ''
          - - 'arn:aws:execute-api:${self:provider.region}:'
            - !Ref 'AWS::AccountId'
            - ':'
            - !Ref WebsocketsApi
            - '/${self:custom.stage}/*'

      - Effect: "Allow"
        Action:
         - "s3:*"
        Resource: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref bucketAttachments
            - '/*'

      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:SendMessageBatch
        Resource:
          ${self:custom.push_queue_arn}

    events:
      - http:
          path: graphql
          method: post
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              Ref: CustomApiGatewayAuthorizer
          private: true

      - http:
          path: graphql
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              Ref: CustomApiGatewayAuthorizer
          private: true

  #
  # websocket
  #
  websocket:
    handler: src/graphql/websocketLambda.handler
    tracing: Active
    timeout: 30

    environment:
      ${file(serverless.env.yml):api}

    vpc:
      ${file(../devops/vpc.yml):lambda}

    events:
      - websocket:
          route: $connect
          cors: true

      - websocket:
         route: $disconnect

      - websocket:
         route: $default

    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'execute-api:Invoke'
          - 'execute-api:ManageConnections'
        Resource: !Join
          - ''
          - - 'arn:aws:execute-api:${self:provider.region}:'
            - !Ref 'AWS::AccountId'
            - ':'
            - !Ref WebsocketsApi
            - '/${self:custom.stage}/*'

      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem

        # Restrict our IAM role permissions to
        # the specific table for the stage
        Resource:
          - Fn::ImportValue: CacheTableArn-${self:custom.stage}
          - !GetAtt [ connectionsTable, Arn ]
          - !Join
            - ''
            - - !GetAtt [ connectionsTable, Arn ]
              - '/index/*'
          - !GetAtt [ subscriptionsTable, Arn ]
          - !Join
            - ''
            - - !GetAtt [ subscriptionsTable, Arn ]
              - '/index/*'
          - !Join
            - ''
            - - !GetAtt [ subscriptionsTable, Arn ]
              - '/index/connection'
          - !GetAtt [ conversationsTable, Arn ]
          - !Join
            - ''
            - - !GetAtt [ conversationsTable, Arn ]
              - '/index/*'
          - !GetAtt [ eventsTable, Arn ]
          - !GetAtt [ pushSubscriptionsTable, Arn ]
          - !Join
            - ''
            - - !GetAtt [ pushSubscriptionsTable, Arn ]
              - '/index/*'

  #
  # publish messagees
  #
  publish:
    handler: src/graphql/publishMessageLambda.handler
    tracing: Active
    timeout: 600
    memorySize: 256

    environment:
      ${file(serverless.env.yml):api}

    vpc:
      ${file(../devops/vpc.yml):lambda}

    events:
      - stream:
          type: dynamodb
          batchSize: 100
          batchWindow: 2
          maximumRetryAttempts: 3
          # // requires to do deduplication handling, bisectBatchOnFunctionError: true
          startingPosition: LATEST
          arn: !GetAtt
            - eventsTable
            - StreamArn
          destinations:
            onFailure:
              type: sqs
              arn:
                !GetAtt
                  - websocketErrorQueue
                  - Arn

    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem

        # Restrict our IAM role permissions to
        # the specific table for the stage
        Resource:
          - Fn::ImportValue: CacheTableArn-${self:custom.stage}
          - !GetAtt [ connectionsTable, Arn ]
          - !Join
            - ''
            - - !GetAtt [ connectionsTable, Arn ]
              - '/index/*'
          - !GetAtt [ subscriptionsTable, Arn ]
          - !Join
            - ''
            - - !GetAtt [ subscriptionsTable, Arn ]
              - '/index/*'
          - !Join
            - ''
            - - !GetAtt [ subscriptionsTable, Arn ]
              - '/index/*'
          - !GetAtt [ conversationsTable, Arn ]
          - !Join
            - ''
            - - !GetAtt [ conversationsTable, Arn ]
              - '/index/*'
          - !GetAtt [ eventsTable, Arn ]
          - !GetAtt [ pushSubscriptionsTable, Arn ]
          - !Join
            - ''
            - - !GetAtt [ pushSubscriptionsTable, Arn ]
              - '/index/*'

      - Effect: Allow
        Action:
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:ListStreams
        Resource: !GetAtt [ eventsTable, StreamArn ]

      - Effect: Allow
        Action:
          - 'execute-api:Invoke'
          - 'execute-api:ManageConnections'
        Resource: !Join
          - ''
          - - 'arn:aws:execute-api:${self:provider.region}:'
            - !Ref 'AWS::AccountId'
            - ':'
            - !Ref WebsocketsApi
            - '/${self:custom.stage}/*'

      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:SendMessageBatch
        Resource:
          ${self:custom.push_queue_arn}

resources:
  Resources:
    websocketErrorQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.apiError}

    bucketAttachments:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}
        ObjectLockEnabled: false
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        AccelerateConfiguration:
          AccelerationStatus: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          # IgnorePublicAcls: true
          # RestrictPublicBuckets: true
        LifecycleConfiguration:
          Rules:
            - Id: removal-${self:custom.bucket}
              Status: Disabled # disable for now
              ExpirationInDays: '17'

    connectionsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.connections_table}

        AttributeDefinitions:
          - AttributeName: memberId
            AttributeType: N
          - AttributeName: connectionId
            AttributeType: S

        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH

        GlobalSecondaryIndexes:
          - IndexName: reverse
            KeySchema:
              - AttributeName: memberId
                KeyType: HASH
              - AttributeName: connectionId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    subscriptionsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.subscriptions_table}

        AttributeDefinitions:
          - AttributeName: eventName
            AttributeType: S
          - AttributeName: subscription
            AttributeType: S
          - AttributeName: connectionId
            AttributeType: S

        KeySchema:
          - AttributeName: subscription
            KeyType: HASH

        GlobalSecondaryIndexes:
          - IndexName: connection
            KeySchema:
              - AttributeName: connectionId
                KeyType: HASH
              - AttributeName: subscription
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY

          - IndexName: reverse
            KeySchema:
              - AttributeName: eventName
                KeyType: HASH
              - AttributeName: subscription
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    pushSubscriptionsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.pushsubscriptions_table}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: ${self:custom.backup_eventstable.${self:custom.stage}}

        AttributeDefinitions:
          - AttributeName: conversation
            AttributeType: S
          - AttributeName: memberId
            AttributeType: N
        KeySchema:
          - AttributeName: conversation
            KeyType: HASH
          - AttributeName: memberId
            KeyType: RANGE

        GlobalSecondaryIndexes:
          - IndexName: reverse
            KeySchema:
              - AttributeName: memberId
                KeyType: HASH
              - AttributeName: conversation
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY

    conversationsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.conversations_table}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: ${self:custom.backup_eventstable.${self:custom.stage}}

        AttributeDefinitions:
          - AttributeName: conversation
            AttributeType: S
          - AttributeName: memberId
            AttributeType: N
          - AttributeName: last_conversation
            AttributeType: S

        KeySchema:
          - AttributeName: conversation
            KeyType: HASH
          - AttributeName: memberId
            KeyType: RANGE

        GlobalSecondaryIndexes:
          # - IndexName: reverse
          #   KeySchema:
          #     - AttributeName: memberId
          #       KeyType: HASH
          #     - AttributeName: conversation
          #       KeyType: RANGE
          #   Projection:
          #     ProjectionType: KEYS_ONLY

          - IndexName: last_conversation
            KeySchema:
              - AttributeName: memberId
                KeyType: HASH
              - AttributeName: last_conversation
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY

    eventsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.events_table}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: ${self:custom.backup_eventstable.${self:custom.stage}}

        AttributeDefinitions:
          - AttributeName: eventName
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: eventName
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_IMAGE

        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: false

    PublishLogGroup:
      Properties:
        RetentionInDays: "14"

    WebsocketLogGroup:
      Properties:
        RetentionInDays: "14"

    GraphqlDashdemoLogGroup:
      Properties:
        RetentionInDays: "7"

    GraphqlLogGroup:
      Properties:
        RetentionInDays: "14"

    DatabaseDashupdateLogGroup:
      Properties:
        RetentionInDays: "7"

    LambdaPermissionAuthorizerApiGateway:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::ImportValue: AuthorizerArn-${self:custom.stage}
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com

    # https://docs.amazonaws.cn/en_us/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html
    CustomApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: lambda-${self:custom.stage}
        IdentitySource: method.request.header.Authorization
        AuthorizerResultTtlInSeconds: 3600
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: TOKEN
        AuthorizerUri:
         Fn::Join:
          - ""
          - - "arn:aws:apigateway:"
            - Ref: "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - Fn::ImportValue: AuthorizerArn-${self:custom.stage}
            - "/invocations"

  Outputs:
    ApiUrl:
      Value: ${self:custom.domainname}
      Export:
        Name: ApiUrl-${self:custom.stage}

    WSApiUrl:
      Value: ${self:custom.wsdomainname}
      Export:
        Name: ApiWSUrl-${self:custom.stage}

    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ApiGatewayRestApiId-${self:custom.stage}

    ApiGatewayRestApiRootResourceId:
      Value:
         !GetAtt
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ApiGatewayRestApiRootResourceId-${self:custom.stage}

    ApiArn:
      Value:
        !GetAtt
          # functions are renamed acording to https://github.com/serverless/serverless/blob/master/docs/providers/aws/guide/resources.md
          - GraphqlLambdaFunction
          - Arn
      Export:
        Name: ApiArn-${self:custom.stage}
